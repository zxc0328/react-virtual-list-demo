{"version":3,"sources":["virtualList/consts.tsx","virtualList/SizeAndPositionManager.tsx","virtualList/index.tsx","App.tsx","index.tsx"],"names":["DIRECTION","ALIGNMENT","SCROLL_PROP","VERTICAL","HORIZONTAL","SIZE_PROP","POSITION_PROP","SizeAndPositionManager","itemCount","itemSizeGetter","estimatedItemSize","lastMeasuredIndex","itemSizeAndPositionData","this","index","Error","lastMeasuredSizeAndPosition","getSizeAndPositionOfLastMeasuredItem","offset","size","i","isNaN","align","START","containerSize","currentOffset","targetIndex","idealOffset","datum","getSizeAndPositionForIndex","maxOffset","minOffset","END","CENTER","Math","max","min","totalSize","getTotalSize","overscanCount","start","findNearestItem","stop","binarySearch","high","low","exponentialSearch","middle","floor","interval","ITEM_STYLE","position","top","left","width","getItemStyle","manager","scrollDirection","VirtualList","props","dataSource","renderListItem","height","itemSize","className","renderCellWarpper","listEl","useRef","sizeAndPositionManager","length","useState","setOffset","useEffect","ele","current","onScroll","currOffset","addEventListener","passive","removeEventListener","items","getVisibleRange","push","listStyle","cellWarpperStyle","minHeight","ref","style","lorem","LoremIpsum","sentencesPerParagraph","wordsPerSentence","getRandomOne","list","random","App","Array","from","map","_","title","generateSentences","content","generateParagraphs","imgUrl","id","feedData","setFeedData","concat","customer","goods","shop","quantity","city","sales","tableData","useAnimation","setUseAnimation","type","name","checked","onChange","e","target","htmlFor","TransitionGroup","item","CSSTransition","key","timeout","classNames","src","alt","onClick","filter","feed","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6137e41b.chunk.js","sourcesContent":["export enum DIRECTION {\n  HORIZONTAL = \"horizontal\",\n  VERTICAL = \"vertical\",\n}\n\nexport const SCROLL_PROP = {\n  [DIRECTION.VERTICAL]: \"scrollTop\",\n  [DIRECTION.HORIZONTAL]: \"scrollLeft\",\n};\n\nexport enum ALIGNMENT {\n  AUTO = \"auto\",\n  START = \"start\",\n  CENTER = \"center\",\n  END = \"end\",\n}\n\nexport const SIZE_PROP = {\n  [DIRECTION.VERTICAL]: \"height\",\n  [DIRECTION.HORIZONTAL]: \"width\",\n};\n\nexport const POSITION_PROP = {\n  [DIRECTION.VERTICAL]: \"top\",\n  [DIRECTION.HORIZONTAL]: \"left\",\n};\n","import { ALIGNMENT } from \"./consts\";\n\nexport type ItemSizeGetter = (index: number) => number;\nexport type ItemSize = number | number[] | ItemSizeGetter;\n\nexport interface SizeAndPosition {\n  size: number;\n  offset: number;\n}\n\ninterface SizeAndPositionData {\n  [id: number]: SizeAndPosition;\n}\n\nexport interface Options {\n  itemCount: number;\n  itemSizeGetter: ItemSizeGetter;\n  estimatedItemSize: number;\n}\n\nexport default class SizeAndPositionManager {\n  private itemSizeGetter: ItemSizeGetter;\n  private itemCount: number;\n  private estimatedItemSize: number;\n  private lastMeasuredIndex: number;\n  private itemSizeAndPositionData: SizeAndPositionData;\n\n  constructor({ itemCount, itemSizeGetter, estimatedItemSize }: Options) {\n    this.itemSizeGetter = itemSizeGetter;\n    this.itemCount = itemCount;\n    this.estimatedItemSize = estimatedItemSize;\n\n    // Cache of size and position data for items, mapped by item index.\n    this.itemSizeAndPositionData = {};\n\n    // Measurements for items up to this index can be trusted; items afterward should be estimated.\n    this.lastMeasuredIndex = -1;\n  }\n\n  updateConfig({\n    itemCount,\n    itemSizeGetter,\n    estimatedItemSize,\n  }: Partial<Options>) {\n    if (itemCount != null) {\n      this.itemCount = itemCount;\n    }\n\n    if (estimatedItemSize != null) {\n      this.estimatedItemSize = estimatedItemSize;\n    }\n\n    if (itemSizeGetter != null) {\n      this.itemSizeGetter = itemSizeGetter;\n    }\n  }\n\n  getLastMeasuredIndex() {\n    return this.lastMeasuredIndex;\n  }\n\n  /**\n   * This method returns the size and position for the item at the specified index.\n   * It just-in-time calculates (or used cached values) for items leading up to the index.\n   */\n  getSizeAndPositionForIndex(index: number) {\n    if (index < 0 || index >= this.itemCount) {\n      throw Error(\n        `Requested index ${index} is outside of range 0..${this.itemCount}`\n      );\n    }\n\n    if (index > this.lastMeasuredIndex) {\n      const lastMeasuredSizeAndPosition = this.getSizeAndPositionOfLastMeasuredItem();\n      let offset =\n        lastMeasuredSizeAndPosition.offset + lastMeasuredSizeAndPosition.size;\n\n      for (let i = this.lastMeasuredIndex + 1; i <= index; i++) {\n        const size = this.itemSizeGetter(i);\n\n        if (size == null || isNaN(size)) {\n          throw Error(`Invalid size returned for index ${i} of value ${size}`);\n        }\n\n        this.itemSizeAndPositionData[i] = {\n          offset,\n          size,\n        };\n\n        offset += size;\n      }\n\n      this.lastMeasuredIndex = index;\n    }\n\n    return this.itemSizeAndPositionData[index];\n  }\n\n  getSizeAndPositionOfLastMeasuredItem() {\n    return this.lastMeasuredIndex >= 0\n      ? this.itemSizeAndPositionData[this.lastMeasuredIndex]\n      : { offset: 0, size: 0 };\n  }\n\n  /**\n   * Total size of all items being measured.\n   * This value will be completedly estimated initially.\n   * As items as measured the estimate will be updated.\n   */\n  getTotalSize(): number {\n    const lastMeasuredSizeAndPosition = this.getSizeAndPositionOfLastMeasuredItem();\n\n    return (\n      lastMeasuredSizeAndPosition.offset +\n      lastMeasuredSizeAndPosition.size +\n      (this.itemCount - this.lastMeasuredIndex - 1) * this.estimatedItemSize\n    );\n  }\n\n  /**\n   * Determines a new offset that ensures a certain item is visible, given the alignment.\n   *\n   * @param align Desired alignment within container; one of \"start\" (default), \"center\", or \"end\"\n   * @param containerSize Size (width or height) of the container viewport\n   * @return Offset to use to ensure the specified item is visible\n   */\n  getUpdatedOffsetForIndex({\n    align = ALIGNMENT.START,\n    containerSize,\n    currentOffset,\n    targetIndex,\n  }: {\n    align: ALIGNMENT | undefined;\n    containerSize: number;\n    currentOffset: number;\n    targetIndex: number;\n  }): number {\n    if (containerSize <= 0) {\n      return 0;\n    }\n\n    const datum = this.getSizeAndPositionForIndex(targetIndex);\n    const maxOffset = datum.offset;\n    const minOffset = maxOffset - containerSize + datum.size;\n\n    let idealOffset;\n\n    switch (align) {\n      case ALIGNMENT.END:\n        idealOffset = minOffset;\n        break;\n      case ALIGNMENT.CENTER:\n        idealOffset = maxOffset - (containerSize - datum.size) / 2;\n        break;\n      case ALIGNMENT.START:\n        idealOffset = maxOffset;\n        break;\n      default:\n        idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));\n    }\n\n    const totalSize = this.getTotalSize();\n\n    return Math.max(0, Math.min(totalSize - containerSize, idealOffset));\n  }\n\n  getVisibleRange({\n    containerSize,\n    offset,\n    overscanCount,\n  }: {\n    containerSize: number;\n    offset: number;\n    overscanCount: number;\n  }): { start?: number; stop?: number } {\n    const totalSize = this.getTotalSize();\n\n    if (totalSize === 0) {\n      return {};\n    }\n\n    const maxOffset = offset + containerSize;\n    let start = this.findNearestItem(offset);\n\n    if (typeof start === \"undefined\") {\n      throw Error(`Invalid offset ${offset} specified`);\n    }\n\n    const datum = this.getSizeAndPositionForIndex(start);\n    offset = datum.offset + datum.size;\n\n    let stop = start;\n\n    while (offset < maxOffset && stop < this.itemCount - 1) {\n      stop++;\n      offset += this.getSizeAndPositionForIndex(stop).size;\n    }\n\n    if (overscanCount) {\n      start = Math.max(0, start - overscanCount);\n      stop = Math.min(stop + overscanCount, this.itemCount - 1);\n    }\n\n    return {\n      start,\n      stop,\n    };\n  }\n\n  /**\n   * Clear all cached values for items after the specified index.\n   * This method should be called for any item that has changed its size.\n   * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionForIndex() is called.\n   */\n  resetItem(index: number) {\n    this.lastMeasuredIndex = Math.min(this.lastMeasuredIndex, index - 1);\n  }\n\n  /**\n   * Searches for the item (index) nearest the specified offset.\n   *\n   * If no exact match is found the next lowest item index will be returned.\n   * This allows partially visible items (with offsets just before/above the fold) to be visible.\n   */\n  findNearestItem(offset: number) {\n    if (isNaN(offset)) {\n      throw Error(`Invalid offset ${offset} specified`);\n    }\n\n    // Our search algorithms find the nearest match at or below the specified offset.\n    // So make sure the offset is at least 0 or no match will be found.\n    offset = Math.max(0, offset);\n\n    const lastMeasuredSizeAndPosition = this.getSizeAndPositionOfLastMeasuredItem();\n    const lastMeasuredIndex = Math.max(0, this.lastMeasuredIndex);\n\n    if (lastMeasuredSizeAndPosition.offset >= offset) {\n      // If we've already measured items within this range just use a binary search as it's faster.\n      return this.binarySearch({\n        high: lastMeasuredIndex,\n        low: 0,\n        offset,\n      });\n    } else {\n      // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n      // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n      // The overall complexity for this approach is O(log n).\n      return this.exponentialSearch({\n        index: lastMeasuredIndex,\n        offset,\n      });\n    }\n  }\n\n  private binarySearch({\n    low,\n    high,\n    offset,\n  }: {\n    low: number;\n    high: number;\n    offset: number;\n  }) {\n    let middle = 0;\n    let currentOffset = 0;\n\n    while (low <= high) {\n      middle = low + Math.floor((high - low) / 2);\n      currentOffset = this.getSizeAndPositionForIndex(middle).offset;\n\n      if (currentOffset === offset) {\n        return middle;\n      } else if (currentOffset < offset) {\n        low = middle + 1;\n      } else if (currentOffset > offset) {\n        high = middle - 1;\n      }\n    }\n\n    if (low > 0) {\n      return low - 1;\n    }\n\n    return 0;\n  }\n\n  private exponentialSearch({\n    index,\n    offset,\n  }: {\n    index: number;\n    offset: number;\n  }) {\n    let interval = 1;\n\n    while (\n      index < this.itemCount &&\n      this.getSizeAndPositionForIndex(index).offset < offset\n    ) {\n      index += interval;\n      interval *= 2;\n    }\n\n    return this.binarySearch({\n      high: Math.min(index, this.itemCount - 1),\n      low: Math.floor(index / 2),\n      offset,\n    });\n  }\n}\n","import React, { useRef, useEffect, useState } from \"react\";\n\nimport { DIRECTION, SCROLL_PROP, SIZE_PROP, POSITION_PROP } from \"./consts\";\nimport SizeAndPositionManager from \"./SizeAndPositionManager\";\nimport \"./index.css\";\n\ninterface Props {\n  /** list window height, required in vertical mode */\n  height?: number;\n  /** list window width, required in horizontal mode */\n  width?: number;\n  /** pre-render item count (prevent empty content when scroll fast) */\n  overscanCount?: number;\n  className?: string;\n  itemSize: number;\n  renderListItem: (\n    data: any,\n    index: number,\n    style: React.CSSProperties\n  ) => React.ReactNode;\n  renderCellWarpper?: (\n    items: React.ReactNode[],\n    style: React.CSSProperties\n  ) => React.ReactNode;\n  dataSource: any[];\n  scrollDirection?: DIRECTION;\n  [key: string]: any;\n}\n\ninterface IndexableHTMLDivElement extends HTMLDivElement {\n  [key: string]: any;\n}\n\nconst ITEM_STYLE: React.CSSProperties = {\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n  width: \"100%\",\n};\n\nconst getItemStyle = (\n  manager: SizeAndPositionManager,\n  index: number,\n  scrollDirection: DIRECTION\n) => {\n  const { size, offset } = manager.getSizeAndPositionForIndex(index);\n\n  return {\n    ...ITEM_STYLE,\n    [SIZE_PROP[scrollDirection]]: size,\n    [POSITION_PROP[scrollDirection]]: offset,\n  };\n};\n\nconst VirtualList: React.FC<Props> = (props) => {\n  const {\n    dataSource,\n    renderListItem,\n    height,\n    itemSize,\n    width,\n    overscanCount = 5,\n    scrollDirection = DIRECTION.VERTICAL,\n    className,\n    renderCellWarpper,\n  } = props;\n\n  const listEl = useRef<HTMLDivElement>(null);\n  const sizeAndPositionManager = useRef(\n    new SizeAndPositionManager({\n      itemCount: dataSource.length,\n      itemSizeGetter: () => itemSize,\n      estimatedItemSize: 50,\n    })\n  );\n\n  const [offset, setOffset] = useState(0);\n\n  useEffect(() => {\n    const ele = listEl.current;\n    const onScroll = () => {\n      if (ele) {\n        const currOffset: number = (ele as IndexableHTMLDivElement)[\n          SCROLL_PROP[scrollDirection]\n        ];\n\n        if (currOffset < 0 || currOffset === offset) {\n          return;\n        }\n\n        setOffset(currOffset);\n      }\n    };\n\n    if (ele) {\n      ele.addEventListener(\"scroll\", onScroll, {\n        passive: true,\n      });\n    }\n\n    return () => {\n      if (ele) {\n        ele.removeEventListener(\"scroll\", onScroll);\n      }\n    };\n  }, []);\n\n  const items: React.ReactNode[] = [];\n  const { start, stop } = sizeAndPositionManager.current.getVisibleRange({\n    containerSize: props[SIZE_PROP[scrollDirection]] || 0,\n    offset,\n    overscanCount,\n  });\n\n  if (typeof start !== \"undefined\" && typeof stop !== \"undefined\") {\n    for (let index = start; index <= stop; index++) {\n      items.push(\n        renderListItem(\n          dataSource[index],\n          index,\n          getItemStyle(sizeAndPositionManager.current, index, scrollDirection)\n        )\n      );\n    }\n  }\n\n  const listStyle: React.CSSProperties = {};\n  if (height) {\n    listStyle.height = `${height}px`;\n  }\n  if (width) {\n    listStyle.width = `${width}px`;\n  }\n\n  const cellWarpperStyle: React.CSSProperties = {\n    width: \"100%\",\n    minHeight: \"100%\",\n    position: \"relative\",\n    [SIZE_PROP[scrollDirection]]: sizeAndPositionManager.current.getTotalSize(),\n  };\n\n  return (\n    <div ref={listEl} className={`virtual-list ${className}`} style={listStyle}>\n      {renderCellWarpper ? (\n        renderCellWarpper(items, cellWarpperStyle)\n      ) : (\n        <div className=\"virtual-list-container\" style={cellWarpperStyle}>\n          {items}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default VirtualList;\n","import React, { useState } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { LoremIpsum } from \"lorem-ipsum\";\n\nimport VirtualList from \"./virtualList\";\n\nimport \"./App.css\";\n\nconst lorem = new LoremIpsum({\n  sentencesPerParagraph: {\n    max: 8,\n    min: 4,\n  },\n  wordsPerSentence: {\n    max: 16,\n    min: 4,\n  },\n});\n\nconst getRandomOne = (list: any[]) => {\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n// https://www.youtube.com/watch?v=4hLuWbR4-eU\n\nconst App: React.FC<{}> = () => {\n  const [feedData, setFeedData] = useState<{ title: string; id: number }[]>(\n    Array.from(new Array(10000)).map((_, index) => ({\n      title: lorem.generateSentences(1),\n      content: lorem.generateParagraphs(1),\n      imgUrl: getRandomOne([\n        \"https://i.picsum.photos/id/399/200/200.jpg?hmac=LCWCFY16G50iBPpqU6-FCw79ovEqvznYsxoQNCIldV8\",\n        \"https://i.picsum.photos/id/477/200/200.jpg?hmac=pGA68LBET23UPGB7L8xL1pA7PYT_x7JazGX__CnlliU\",\n        \"https://i.picsum.photos/id/696/200/200.jpg?hmac=JE4lFckorKxM41-eM1nTxXjpOeCf3aZkAxrLl3ZAYI0\",\n        \"https://i.picsum.photos/id/1024/200/200.jpg?hmac=LR-PJPi70YREc_0NdDp68FkLt6-f1sKeJWwgOhCeyBU\",\n        \"https://i.picsum.photos/id/791/200/200.jpg?hmac=bPVayqOX5aUzsnsX99AgWaxWB3WzWqwaiSDJ-lNHUk4\",\n        \"https://i.picsum.photos/id/464/200/200.jpg?hmac=rT0rkzkukXVK3LYD1qHhc-Yqk0dFyIYoFk8wuNpCkAY\",\n        \"https://i.picsum.photos/id/687/200/200.jpg?hmac=U-mrTuk3Y5M3brBJ76mYvaj-bZ3ggY1OD8YOIPw89uI\",\n      ]),\n      id: index,\n    }))\n  );\n\n  const [tableData, setTableData] = useState<\n    {\n      id: number;\n      customer?: string;\n      shop?: string;\n      city?: string;\n      goods?: string;\n      quantity?: number;\n      sales?: number;\n    }[]\n  >(\n    [\n      {\n        id: -1,\n      },\n    ].concat(\n      Array.from(new Array(50000)).map((_, index) => ({\n        customer: getRandomOne([\"张三\", \"李四\", \"王五\", \"Jack\", \"Marry\"]),\n        goods: getRandomOne([\"洗衣机\", \"电冰箱\", \"电视机\", \"航空母舰\", \"电脑\"]),\n        shop: getRandomOne([\"银泰\", \"天街\", \"大润发\", \"物美\", \"沃尔玛\"]),\n        id: index,\n        quantity: Math.floor(Math.random() * 100) + 1,\n        city: getRandomOne([\"北京\", \"上海\", \"杭州\", \"成都\", \"深圳\"]),\n        sales: Math.floor(Math.random() * 1000) + 1,\n      }))\n    )\n  );\n\n  const [useAnimation, setUseAnimation] = useState(true);\n\n  return (\n    <div className=\"App\">\n      <h3>React virutal list demo</h3>\n      <div className=\"setting\">\n        <div className=\"item\">\n          <input\n            type=\"checkbox\"\n            id=\"animation\"\n            name=\"animation\"\n            checked={useAnimation}\n            onChange={(e) => {\n              setUseAnimation(e.target.checked);\n            }}\n          />\n          <label htmlFor=\"scales\">\n            Turn {useAnimation ? \"off\" : \"on\"} animation\n          </label>\n        </div>\n      </div>\n      <div className=\"main\">\n        <div className=\"column\">\n          <h4>Feed(10000 records)</h4>\n          <VirtualList\n            className=\"dialog-list\"\n            height={600}\n            itemSize={120}\n            dataSource={feedData}\n            overscanCount={0}\n            renderCellWarpper={(items, style) => {\n              return <TransitionGroup style={style}>{items}</TransitionGroup>;\n            }}\n            renderListItem={(item, index, style) => {\n              return (\n                <CSSTransition\n                  key={item.id}\n                  timeout={500}\n                  classNames=\"item-vertical\"\n                >\n                  <div className=\"list-item vertical\" style={style}>\n                    <div className=\"avatar\">\n                      <img src={item.imgUrl} alt=\"avatar\" />\n                    </div>\n                    <div className=\"bubble\">\n                      <div className=\"title\">\n                        <div className=\"text\">{item.title}</div>\n                        <div\n                          className=\"btn\"\n                          onClick={() => {\n                            setFeedData(\n                              feedData.filter((feed) => feed.id !== item.id)\n                            );\n                          }}\n                        >\n                          Delete\n                        </div>\n                      </div>\n                      <div className=\"content\">{item.content}</div>\n                    </div>\n                  </div>\n                </CSSTransition>\n              );\n            }}\n          />\n        </div>\n        <div className=\"column\">\n          <h4>Data Preview(50000 records)</h4>\n          <VirtualList\n            className=\"list table-list\"\n            height={400}\n            itemSize={50}\n            dataSource={tableData}\n            renderCellWarpper={(items, style) => {\n              return (\n                <table style={style} className=\"table\">\n                  <thead className=\"table-header\">\n                    <tr>\n                      <th>id</th>\n                      <th>顾客名</th>\n                      <th>商场</th>\n                      <th>城市</th>\n                      <th>商品</th>\n                      <th>数量</th>\n                      <th>销售额</th>\n                    </tr>\n                  </thead>\n                  <tbody>{items}</tbody>\n                </table>\n              );\n            }}\n            renderListItem={(item, index, style) => {\n              if (item.id === -1) {\n                return (\n                  <tr\n                    key={item.id}\n                    className=\"list-item horizontal\"\n                    style={style}\n                  ></tr>\n                );\n              }\n              return (\n                <tr\n                  key={item.id}\n                  className=\"list-item horizontal\"\n                  style={style}\n                >\n                  <td>{item.id}</td>\n                  <td>{item.customer}</td>\n                  <td>{item.shop}</td>\n                  <td>{item.city}</td>\n                  <td>{item.goods}</td>\n                  <td>{item.quantity}</td>\n                  <td>{item.sales}</td>\n                </tr>\n              );\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}